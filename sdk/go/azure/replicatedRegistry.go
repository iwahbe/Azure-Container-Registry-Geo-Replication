// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	containerregistry "github.com/pulumi/pulumi-azure-native/sdk/go/azure/containerregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReplicatedRegistry struct {
	pulumi.ResourceState

	// The login server url
	LoginServer pulumi.StringOutput `pulumi:"loginServer"`
	// The Registry
	Registry containerregistry.RegistryOutput `pulumi:"registry"`
	// The replication policy
	Replication containerregistry.ReplicationOutput `pulumi:"replication"`
}

// NewReplicatedRegistry registers a new resource with the given unique name, arguments, and options.
func NewReplicatedRegistry(ctx *pulumi.Context,
	name string, args *ReplicatedRegistryArgs, opts ...pulumi.ResourceOption) (*ReplicatedRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ReplicationLocation == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationLocation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ReplicatedRegistry
	err := ctx.RegisterRemoteComponentResource("azure-quickstart-acr-geo-replication:index:ReplicatedRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type replicatedRegistryArgs struct {
	// Enable admin user that has push / pull permissions to the registry
	AdminUserEnabled *bool `pulumi:"adminUserEnabled"`
	// Globally unique name of your azure container registry
	Name string `pulumi:"name"`
	// The location of the registry replica location
	ReplicationLocation string `pulumi:"replicationLocation"`
	// The name of the enclosing resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Tier of your Azure Container Registry. Geo-replication requires the Premium SKU
	Sku *string `pulumi:"sku"`
}

// The set of arguments for constructing a ReplicatedRegistry resource.
type ReplicatedRegistryArgs struct {
	// Enable admin user that has push / pull permissions to the registry
	AdminUserEnabled pulumi.BoolPtrInput
	// Globally unique name of your azure container registry
	Name pulumi.StringInput
	// The location of the registry replica location
	ReplicationLocation pulumi.StringInput
	// The name of the enclosing resource group
	ResourceGroupName pulumi.StringInput
	// Tier of your Azure Container Registry. Geo-replication requires the Premium SKU
	Sku pulumi.StringPtrInput
}

func (ReplicatedRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicatedRegistryArgs)(nil)).Elem()
}

type ReplicatedRegistryInput interface {
	pulumi.Input

	ToReplicatedRegistryOutput() ReplicatedRegistryOutput
	ToReplicatedRegistryOutputWithContext(ctx context.Context) ReplicatedRegistryOutput
}

func (*ReplicatedRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatedRegistry)(nil))
}

func (i *ReplicatedRegistry) ToReplicatedRegistryOutput() ReplicatedRegistryOutput {
	return i.ToReplicatedRegistryOutputWithContext(context.Background())
}

func (i *ReplicatedRegistry) ToReplicatedRegistryOutputWithContext(ctx context.Context) ReplicatedRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatedRegistryOutput)
}

func (i *ReplicatedRegistry) ToReplicatedRegistryPtrOutput() ReplicatedRegistryPtrOutput {
	return i.ToReplicatedRegistryPtrOutputWithContext(context.Background())
}

func (i *ReplicatedRegistry) ToReplicatedRegistryPtrOutputWithContext(ctx context.Context) ReplicatedRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatedRegistryPtrOutput)
}

type ReplicatedRegistryPtrInput interface {
	pulumi.Input

	ToReplicatedRegistryPtrOutput() ReplicatedRegistryPtrOutput
	ToReplicatedRegistryPtrOutputWithContext(ctx context.Context) ReplicatedRegistryPtrOutput
}

type replicatedRegistryPtrType ReplicatedRegistryArgs

func (*replicatedRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicatedRegistry)(nil))
}

func (i *replicatedRegistryPtrType) ToReplicatedRegistryPtrOutput() ReplicatedRegistryPtrOutput {
	return i.ToReplicatedRegistryPtrOutputWithContext(context.Background())
}

func (i *replicatedRegistryPtrType) ToReplicatedRegistryPtrOutputWithContext(ctx context.Context) ReplicatedRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatedRegistryPtrOutput)
}

// ReplicatedRegistryArrayInput is an input type that accepts ReplicatedRegistryArray and ReplicatedRegistryArrayOutput values.
// You can construct a concrete instance of `ReplicatedRegistryArrayInput` via:
//
//          ReplicatedRegistryArray{ ReplicatedRegistryArgs{...} }
type ReplicatedRegistryArrayInput interface {
	pulumi.Input

	ToReplicatedRegistryArrayOutput() ReplicatedRegistryArrayOutput
	ToReplicatedRegistryArrayOutputWithContext(context.Context) ReplicatedRegistryArrayOutput
}

type ReplicatedRegistryArray []ReplicatedRegistryInput

func (ReplicatedRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicatedRegistry)(nil)).Elem()
}

func (i ReplicatedRegistryArray) ToReplicatedRegistryArrayOutput() ReplicatedRegistryArrayOutput {
	return i.ToReplicatedRegistryArrayOutputWithContext(context.Background())
}

func (i ReplicatedRegistryArray) ToReplicatedRegistryArrayOutputWithContext(ctx context.Context) ReplicatedRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatedRegistryArrayOutput)
}

// ReplicatedRegistryMapInput is an input type that accepts ReplicatedRegistryMap and ReplicatedRegistryMapOutput values.
// You can construct a concrete instance of `ReplicatedRegistryMapInput` via:
//
//          ReplicatedRegistryMap{ "key": ReplicatedRegistryArgs{...} }
type ReplicatedRegistryMapInput interface {
	pulumi.Input

	ToReplicatedRegistryMapOutput() ReplicatedRegistryMapOutput
	ToReplicatedRegistryMapOutputWithContext(context.Context) ReplicatedRegistryMapOutput
}

type ReplicatedRegistryMap map[string]ReplicatedRegistryInput

func (ReplicatedRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicatedRegistry)(nil)).Elem()
}

func (i ReplicatedRegistryMap) ToReplicatedRegistryMapOutput() ReplicatedRegistryMapOutput {
	return i.ToReplicatedRegistryMapOutputWithContext(context.Background())
}

func (i ReplicatedRegistryMap) ToReplicatedRegistryMapOutputWithContext(ctx context.Context) ReplicatedRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatedRegistryMapOutput)
}

type ReplicatedRegistryOutput struct{ *pulumi.OutputState }

func (ReplicatedRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatedRegistry)(nil))
}

func (o ReplicatedRegistryOutput) ToReplicatedRegistryOutput() ReplicatedRegistryOutput {
	return o
}

func (o ReplicatedRegistryOutput) ToReplicatedRegistryOutputWithContext(ctx context.Context) ReplicatedRegistryOutput {
	return o
}

func (o ReplicatedRegistryOutput) ToReplicatedRegistryPtrOutput() ReplicatedRegistryPtrOutput {
	return o.ToReplicatedRegistryPtrOutputWithContext(context.Background())
}

func (o ReplicatedRegistryOutput) ToReplicatedRegistryPtrOutputWithContext(ctx context.Context) ReplicatedRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicatedRegistry) *ReplicatedRegistry {
		return &v
	}).(ReplicatedRegistryPtrOutput)
}

type ReplicatedRegistryPtrOutput struct{ *pulumi.OutputState }

func (ReplicatedRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicatedRegistry)(nil))
}

func (o ReplicatedRegistryPtrOutput) ToReplicatedRegistryPtrOutput() ReplicatedRegistryPtrOutput {
	return o
}

func (o ReplicatedRegistryPtrOutput) ToReplicatedRegistryPtrOutputWithContext(ctx context.Context) ReplicatedRegistryPtrOutput {
	return o
}

func (o ReplicatedRegistryPtrOutput) Elem() ReplicatedRegistryOutput {
	return o.ApplyT(func(v *ReplicatedRegistry) ReplicatedRegistry {
		if v != nil {
			return *v
		}
		var ret ReplicatedRegistry
		return ret
	}).(ReplicatedRegistryOutput)
}

type ReplicatedRegistryArrayOutput struct{ *pulumi.OutputState }

func (ReplicatedRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatedRegistry)(nil))
}

func (o ReplicatedRegistryArrayOutput) ToReplicatedRegistryArrayOutput() ReplicatedRegistryArrayOutput {
	return o
}

func (o ReplicatedRegistryArrayOutput) ToReplicatedRegistryArrayOutputWithContext(ctx context.Context) ReplicatedRegistryArrayOutput {
	return o
}

func (o ReplicatedRegistryArrayOutput) Index(i pulumi.IntInput) ReplicatedRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicatedRegistry {
		return vs[0].([]ReplicatedRegistry)[vs[1].(int)]
	}).(ReplicatedRegistryOutput)
}

type ReplicatedRegistryMapOutput struct{ *pulumi.OutputState }

func (ReplicatedRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReplicatedRegistry)(nil))
}

func (o ReplicatedRegistryMapOutput) ToReplicatedRegistryMapOutput() ReplicatedRegistryMapOutput {
	return o
}

func (o ReplicatedRegistryMapOutput) ToReplicatedRegistryMapOutputWithContext(ctx context.Context) ReplicatedRegistryMapOutput {
	return o
}

func (o ReplicatedRegistryMapOutput) MapIndex(k pulumi.StringInput) ReplicatedRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReplicatedRegistry {
		return vs[0].(map[string]ReplicatedRegistry)[vs[1].(string)]
	}).(ReplicatedRegistryOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplicatedRegistryOutput{})
	pulumi.RegisterOutputType(ReplicatedRegistryPtrOutput{})
	pulumi.RegisterOutputType(ReplicatedRegistryArrayOutput{})
	pulumi.RegisterOutputType(ReplicatedRegistryMapOutput{})
}
